{"version":3,"sources":["context/GlobalState.js","components/Stock.js","components/Reports.js","components/TransactionForm.js","components/Transactions.js","components/ProductMaster.js","App.js","reportWebVitals.js","index.js"],"names":["initialState","reports","stocks","transactions","EDIT_PRODUCT","GET_REPORTS","ADD_PRODUCT","GET_TRANSACTIONS","ADD_TRANSACTION","UPDATE_STOCKS","appReducer","state","action","type","payload","quantity","product","elementsIndex","findIndex","value","id","existingStock","availStock","date","amount","filter","productName","purchasePrice","salesPrice","console","log","inventoryQty","reduce","index","getInventoryQty","inventoryAmount","map","stock","getInventoryTotalAmount","totalSales","totalPurchase","getTotalPurchase","data","key","sales","purchases","GlobalContext","createContext","GlobalProvider","children","useReducer","dispatch","Provider","getTransactions","addTransaction","values","filterTransactions","editProduct","getReports","addProduct","Math","floor","random","Stock","useContext","Card","CardContent","Box","display","justifyContent","TableContainer","Table","TableHead","TableRow","TableCell","TableBody","component","scope","onClick","Reports","useEffect","reportsData","Grid","container","spacing","report","item","xs","sm","md","Typography","gutterBottom","variant","color","useStyles","makeStyles","theme","createStyles","formControl","margin","minWidth","selectEmpty","marginTop","a","b","Promise","r","setTimeout","MyField","props","useFormikContext","setFieldValue","useField","field","meta","React","isCurrent","fetchNewTextC","then","rate","name","TextField","fullWidth","touched","error","TransactionForm","transactionTypes","classes","validationSchema","Yup","required","initialValues","Date","utils","DateFnsUtils","onSubmit","enableReinitialize","errors","handleChange","isSubmitting","className","FormControl","InputLabel","Select","labelId","onChange","Boolean","helperText","defaultValue","MenuItem","disableToolbar","format","label","KeyboardButtonProps","disabled","Button","TransactionFilter","setReload","useState","setValue","FormLabel","RadioGroup","aria-label","event","target","FormControlLabel","control","Radio","Transactions","reload","mt","txn","ProductMaster","open","setOpen","Dialog","onClose","aria-labelledby","DialogTitle","DialogContent","App","Container","alignItems","Filters","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.8296e350.chunk.js","sourcesContent":["import React, { createContext, useReducer } from \"react\";\nconst initialState = {\n  reports: [],\n  stocks: [\n    // {\n    //   id: 1,\n    //   productName: \"abc\",\n    //   purchasePrice: 8,\n    //   salesPrice: 10,\n    //   availStock: 12\n    // }\n  ],\n  transactions: [\n    // {\n    //   id: 1,\n    //   productName: \"abc\",\n    //   type: \"sales\",\n    //   quantity: 10,\n    //   salesPrice: 10,\n    //   purchasePrice: 8,\n    //   amount: \"120\",\n    //   date: new Date()\n    // }\n  ]\n};\n\nexport const EDIT_PRODUCT = \"edit_product\";\nexport const GET_REPORTS = \"get_report\";\nexport const ADD_PRODUCT = \"add_product\";\nexport const FILTER_TRANSACTIONS = \"filter_transactions\";\nexport const GET_TRANSACTIONS = \"get_transactions\";\nexport const ADD_TRANSACTION = \"add_transaction\";\nexport const UPDATE_STOCKS = \"UPDATE_STOCKS\";\n\nconst getInventoryQty = (stocks) =>\n  stocks.reduce((index, value) => index + value.availStock, 0);\n\nconst getInventoryTotalAmount = (stocks) =>\n  stocks\n    .map((stock) => stock.availStock * stock.salesPrice)\n    .reduce((index, value) => index + value, 0);\n\nconst getTotalSales = (transactions) =>\n  transactions\n    .filter((value) => value.type === \"sales\")\n    .map((value) => value.salesPrice * value.quantity)\n    .reduce((index, value) => index + value, 0);\n\nconst getTotalPurchase = (transactions) =>\n  transactions\n    .filter((value) => value.type === \"purchases\")\n    .map((value) => value.purchasePrice * value.quantity)\n    .reduce((index, value) => index + value, 0);\n// const updateStock = ({ type, quantity, product, stocks }) => {\n//   const { availStock } = stocks.filter((value) => value.id === product);\n//   console.log({ type, quantity, product, stocks });\n// };\n\nconst appReducer = (state, action) => {\n  switch (action.type) {\n    case EDIT_PRODUCT:\n      return state;\n    case ADD_PRODUCT:\n      const newItem = {\n        ...state,\n        stocks: [...state.stocks, action.payload]\n      };\n      return newItem;\n    case UPDATE_STOCKS: {\n      const { type, quantity, product } = action.payload;\n      const elementsIndex = state.stocks.findIndex(\n        (value) => value.id === product\n      );\n      const existingStock = [...state.stocks];\n\n      if (type === \"sales\") {\n        existingStock[elementsIndex] = {\n          ...existingStock[elementsIndex],\n          availStock: existingStock[elementsIndex][\"availStock\"] - 1 * quantity\n        };\n      }\n      if (type === \"purchases\") {\n        existingStock[elementsIndex] = {\n          ...existingStock[elementsIndex],\n          availStock: existingStock[elementsIndex][\"availStock\"] + 1 * quantity\n        };\n      }\n\n      const _stocks = {\n        ...state,\n        stocks: existingStock\n      };\n      return _stocks;\n    }\n    case ADD_TRANSACTION:\n      const { product, type, date, quantity } = action.payload;\n      const stocks = state.stocks;\n      let amount = 0;\n      const {\n        productName,\n        purchasePrice,\n        salesPrice,\n        availStock\n      } = stocks.filter((value) => value.id === product)[0];\n\n      //TODO: VALIDATE AVAILABLE STOCK IF EXIST\n\n      if (type === \"sales\") {\n        console.log({ salesPrice, quantity });\n        amount = 1 * salesPrice * 1 * quantity;\n      }\n      if (type === \"purchases\") {\n        console.log({ purchasePrice, quantity });\n        amount = 1 * purchasePrice * 1 * quantity;\n      }\n\n      // updateStock({ type, quantity, product, stocks: state.stocks });\n\n      const txns = {\n        ...state,\n        transactions: [\n          ...state.transactions,\n          {\n            productName,\n            type,\n            purchasePrice,\n            quantity,\n            salesPrice,\n            amount,\n            date\n          }\n        ]\n      };\n      return txns;\n    case GET_REPORTS:\n      const inventoryQty = getInventoryQty(state.stocks);\n\n      const inventoryAmount = getInventoryTotalAmount(state.stocks);\n\n      const totalSales = getTotalSales(state.transactions);\n\n      const totalPurchase = getTotalPurchase(state.transactions);\n\n      const arrDt = [\n        { value: totalPurchase, key: \"Purchase\" },\n        { value: totalSales, key: \"Sale\" },\n        { value: totalSales - totalPurchase, key: \"Profit\" },\n        { value: inventoryQty, key: \"Intentory Qnty\" },\n        { value: inventoryAmount, key: \"Intentory Amount\" }\n      ];\n\n      const data = [...arrDt];\n      return { ...state, reports: data };\n    case GET_TRANSACTIONS:\n      console.log(action.payload);\n      if (action.payload === \"sales\") {\n        const sales = state.transactions.filter(\n          (value) => value.type === \"sales\" && value\n        );\n        // console.log({ ...state, transactions: sales });\n        return { ...state, transactions: sales };\n      }\n      if (action.payload === \"purchases\") {\n        const purchases = state.transactions.filter(\n          (value) => value.type === \"purchases\" && value\n        );\n        // console.log({ ...state, transactions: purchases });\n        return { ...state, transactions: purchases };\n      }\n      return state;\n\n    default:\n      return state;\n  }\n};\n\nexport const GlobalContext = createContext(initialState);\n\nexport const GlobalProvider = ({ children }) => {\n  const [state, dispatch] = useReducer(appReducer, initialState);\n\n  const editProduct = (id) => {\n    dispatch({ type: EDIT_PRODUCT, id });\n  };\n\n  const getReports = () => {\n    console.log(\"get reports\");\n    dispatch({ type: GET_REPORTS });\n  };\n\n  const getTransactions = (filter) => {\n    dispatch({ type: GET_TRANSACTIONS, payload: filter });\n  };\n\n  const addProduct = (payload) => {\n    console.log(\"add products\");\n    dispatch({\n      type: ADD_PRODUCT,\n      payload: {\n        id: Math.floor(Math.random() * 100),\n        ...payload,\n        availStock: 0\n      }\n    });\n    dispatch({ type: GET_REPORTS });\n  };\n\n  const addTransaction = (values) => {\n    console.log(\"add transaction\");\n    dispatch({\n      type: ADD_TRANSACTION,\n      payload: values\n    });\n    dispatch({\n      type: UPDATE_STOCKS,\n      payload: values\n    });\n    dispatch({ type: GET_REPORTS });\n  };\n\n  const filterTransactions = (value) => {\n    dispatch({ type: GET_TRANSACTIONS, payload: value });\n  };\n\n  return (\n    <GlobalContext.Provider\n      value={{\n        transactions: state.transactions,\n        getTransactions: getTransactions,\n        addTransaction: addTransaction,\n        filterTransactions: filterTransactions,\n        stocks: state.stocks,\n        reports: state.reports,\n        editProduct: editProduct,\n        getReports: getReports,\n        addProduct: addProduct\n      }}\n    >\n      {children}\n    </GlobalContext.Provider>\n  );\n};\n","import {\n  Card,\n  Button,\n  CardContent,\n  TableContainer,\n  Table,\n  TableHead,\n  TableRow,\n  TableCell,\n  TableBody,\n  Box,\n} from '@material-ui/core';\nimport { useContext } from 'react';\nimport { GlobalContext } from '../context/GlobalState';\n\nconst Stock = () => {\n  const { stocks, editProduct, addProduct } = useContext(GlobalContext);\n  return (\n    <Card>\n      <CardContent>\n        <Box display=\"flex\" justifyContent=\"space-between\">\n          <h3>Stocks</h3>\n        </Box>\n        <TableContainer>\n          <Table>\n            <TableHead>\n              <TableRow>\n                <TableCell>productName</TableCell>\n                <TableCell>Available stocks</TableCell>\n                <TableCell></TableCell>\n              </TableRow>\n            </TableHead>\n            <TableBody>\n              {stocks &&\n                stocks.map((stock) => (\n                  <TableRow key={stock.id}>\n                    <TableCell component=\"TableCell\" scope=\"row\">\n                      {stock.productName}\n                    </TableCell>\n                    <TableCell>{stock.availStock}</TableCell>\n                    <TableCell>\n                      <button onClick={() => editProduct(stock.id)}>E</button>\n                      <button onClick={() => console.log('delete product')}>\n                        D\n                      </button>\n                    </TableCell>\n                  </TableRow>\n                ))}\n            </TableBody>\n          </Table>\n        </TableContainer>\n      </CardContent>\n    </Card>\n  );\n};\n\nexport default Stock;\n","import { Card, Typography, Grid, CardContent } from \"@material-ui/core\";\nimport { useContext, useEffect } from \"react\";\nimport { GlobalContext } from \"../context/GlobalState\";\n\nconst Reports = () => {\n  const { reports, getReports } = useContext(GlobalContext);\n\n  useEffect(() => {\n    const reportsData = getReports();\n    console.log({ reportsData });\n  }, []);\n\n  console.log(\"reports\");\n  return (\n    <div>\n      <h3>Reports</h3>\n      <Grid container spacing={3}>\n        {reports &&\n          reports.map((report) => (\n            <Grid key={report.key} item xs={12} sm={4} md>\n              <Card>\n                <CardContent>\n                  <Typography gutterBottom variant=\"h6\" component=\"h2\">\n                    {report.key}\n                  </Typography>\n                  <Typography\n                    variant=\"body2\"\n                    color=\"textSecondary\"\n                    component=\"p\"\n                  >\n                    {report.value}\n                  </Typography>\n                </CardContent>\n              </Card>\n            </Grid>\n          ))}\n      </Grid>\n    </div>\n  );\n};\n\nexport default Reports;\n","import React, { useContext } from \"react\";\nimport {\n  Button,\n  FormControl,\n  Grid,\n  InputLabel,\n  MenuItem,\n  Select,\n  TextField\n} from \"@material-ui/core\";\nimport {\n  KeyboardDatePicker,\n  MuiPickersUtilsProvider\n} from \"@material-ui/pickers\";\nimport DateFnsUtils from \"@date-io/date-fns\";\nimport { Formik, Form, useFormikContext, useField, Field } from \"formik\";\nimport * as Yup from \"yup\";\nimport { createStyles, makeStyles } from \"@material-ui/core/styles\";\nimport { GlobalContext } from \"../context/GlobalState\";\n\nconst useStyles = makeStyles((theme) =>\n  createStyles({\n    formControl: {\n      margin: theme.spacing(1),\n      minWidth: \"100%\"\n    },\n    selectEmpty: {\n      marginTop: theme.spacing(2)\n    }\n  })\n);\n\nasync function fetchNewTextC(a, b) {\n  await new Promise((r) => setTimeout(r, 500));\n  return a;\n}\n\nconst MyField = (props) => {\n  const {\n    values: { quantity, product },\n    setFieldValue\n  } = useFormikContext();\n  const [field, meta] = useField(props);\n\n  React.useEffect(() => {\n    let isCurrent = true;\n    // your business logic around when to fetch goes here.\n    if (quantity !== \"\" && product !== \"\") {\n      fetchNewTextC(quantity, product).then((rate) => {\n        if (!!isCurrent) {\n          // prevent setting old values\n          setFieldValue(props.name, rate);\n        }\n      });\n    }\n    return () => {\n      isCurrent = false;\n    };\n  }, [product, quantity, setFieldValue, props.name]);\n\n  return (\n    <>\n      <TextField fullWidth {...props} {...field} />\n      {!!meta.touched && !!meta.error && <div>{meta.error}</div>}\n    </>\n  );\n};\n\nconst TransactionForm = () => {\n  const { stocks, addTransaction } = useContext(GlobalContext);\n  const transactionTypes = [\"sales\", \"purchases\"];\n\n  const classes = useStyles();\n\n  const validationSchema = Yup.object({\n    rate: Yup.string().required(\"rate is required\"),\n    quantity: Yup.string().required(\"quantity is required\"),\n    product: Yup.string(\"Enter your product\").required(\"product is required\"),\n    date: Yup.string().required(\"date is required\"),\n    type: Yup.string().required(\"Transaction Type is required\")\n  });\n\n  const initialValues = {\n    product: \"\",\n    quantity: \"\",\n    type: \"\",\n    rate: \"\",\n    date: new Date(\"2014-08-18T21:11:54\")\n  };\n\n  const onSubmit = (values) => {\n    addTransaction(values);\n  };\n\n  return (\n    <MuiPickersUtilsProvider utils={DateFnsUtils}>\n      <Formik\n        initialValues={initialValues}\n        validationSchema={validationSchema}\n        onSubmit={onSubmit}\n        enableReinitialize={true}\n      >\n        {({ touched, errors, handleChange, isSubmitting, values }) => (\n          <Form className=\"\">\n            <Grid container spacing=\"2\">\n              <Grid item xs={12} sm={6} md={4}>\n                <FormControl className={classes.formControl}>\n                  <InputLabel id=\"demo-simple-select-label\">Product</InputLabel>\n                  <Select\n                    labelId=\"demo-simple-select-label\"\n                    id=\"product\"\n                    name=\"product\"\n                    onChange={handleChange}\n                    error={touched.product && Boolean(errors.product)}\n                    helperText={touched.product && errors.product}\n                    defaultValue=\"\"\n                  >\n                    {stocks.map((value) => (\n                      <MenuItem value={value.id}>{value.productName}</MenuItem>\n                    ))}\n                  </Select>\n                </FormControl>\n              </Grid>\n              <Grid item xs={12} sm={6} md={4}>\n                <FormControl className={classes.formControl}>\n                  <InputLabel id=\"type\">Transaction Types</InputLabel>\n                  <Select\n                    labelId=\"type\"\n                    id=\"type\"\n                    name=\"type\"\n                    onChange={handleChange}\n                    defaultValue=\"\"\n                    error={touched.type && Boolean(errors.type)}\n                    helperText={touched.type && errors.type}\n                  >\n                    {transactionTypes.map((value) => (\n                      <MenuItem value={value}>{value}</MenuItem>\n                    ))}\n                  </Select>\n                </FormControl>\n              </Grid>\n              <Grid item xs={12} sm={6} md={4}>\n                <KeyboardDatePicker\n                  disableToolbar\n                  variant=\"inline\"\n                  format=\"MM/dd/yyyy\"\n                  margin=\"normal\"\n                  id=\"date\"\n                  label=\"Date\"\n                  name=\"date\"\n                  onChange={handleChange}\n                  KeyboardButtonProps={{\n                    \"aria-label\": \"change date\"\n                  }}\n                />\n              </Grid>\n              <Grid item xs={12} sm={6} md={4}>\n                <TextField\n                  fullWidth\n                  id=\"quantity\"\n                  name=\"quantity\"\n                  label=\"quantity\"\n                  onChange={handleChange}\n                  error={touched.quantity && Boolean(errors.quantity)}\n                  helperText={touched.quantity && errors.quantity}\n                />\n              </Grid>\n\n              <Grid item xs={12} sm={6} md={4}>\n                <MyField name=\"rate\" disabled />\n              </Grid>\n              <Grid item xs={12} sm={6} md={4}>\n                <Button\n                  color=\"primary\"\n                  variant=\"contained\"\n                  fullWidth\n                  type=\"submit\"\n                >\n                  Submit\n                </Button>\n              </Grid>\n            </Grid>\n          </Form>\n        )}\n      </Formik>\n    </MuiPickersUtilsProvider>\n  );\n};\n\nexport default TransactionForm;\n","import {\n  Card,\n  Grid,\n  CardContent,\n  TableContainer,\n  Table,\n  TableHead,\n  TableRow,\n  TableCell,\n  TableBody,\n  FormControlLabel,\n  Radio,\n  FormControl,\n  FormLabel,\n  RadioGroup,\n  Box\n} from \"@material-ui/core\";\nimport { useContext, useEffect, useState } from \"react\";\nimport { GlobalContext } from \"../context/GlobalState\";\nimport TransactionForm from \"./TransactionForm\";\n\nconst Transactions = () => {\n  const { transactions, filterTransactions } = useContext(GlobalContext);\n  const [reload, setReload] = useState(false);\n\n  useEffect(() => {\n    console.log(\"refresh page\");\n  }, [reload]);\n\n  return (\n    <Card>\n      <CardContent>\n        <h3>Transactions</h3>\n        <Card>\n          <CardContent>\n            <TransactionForm />\n          </CardContent>\n        </Card>\n        <Box mt={4}>\n          <TransactionFilter\n            filterTransactions={filterTransactions}\n            setReload={setReload}\n          />\n        </Box>\n        <TableContainer>\n          <Table>\n            <TableHead>\n              <TableRow>\n                <TableCell>productName</TableCell>\n                <TableCell>type</TableCell>\n                <TableCell>quantiry</TableCell>\n                <TableCell>price</TableCell>\n                <TableCell>amount</TableCell>\n              </TableRow>\n            </TableHead>\n            <TableBody>\n              {transactions &&\n                transactions.map((txn) => (\n                  <TableRow key={txn.id}>\n                    <TableCell>{txn.productName}</TableCell>\n                    <TableCell>{txn.type}</TableCell>\n                    <TableCell>{txn.quantity}</TableCell>\n                    <TableCell>\n                      {txn.type === \"sales\"\n                        ? txn.salesPrice\n                        : txn.purchasePrice}\n                    </TableCell>\n                    <TableCell>{txn.amount}</TableCell>\n                    <button onClick={() => console.log(\"edit transactions\")}>\n                      E\n                    </button>\n                    <button onClick={() => console.log(\"delete transaction\")}>\n                      D\n                    </button>\n                  </TableRow>\n                ))}\n            </TableBody>\n          </Table>\n        </TableContainer>\n      </CardContent>\n    </Card>\n  );\n};\n\nconst TransactionFilter = ({ filterTransactions, setReload }) => {\n  const [value, setValue] = useState(\"all\");\n  const handleStateChange = (event) => {\n    setValue(event.target.value);\n    // filterTransactions(value);\n    // setReload(true);\n  };\n\n  return (\n    <FormControl component=\"fieldset\">\n      <FormLabel component=\"legend\">Show Transactions</FormLabel>\n      <RadioGroup\n        aria-label=\"transactions\"\n        name=\"transactions\"\n        value={value}\n        onChange={handleStateChange}\n      >\n        <Grid container>\n          <Grid item xs>\n            <FormControlLabel\n              value=\"all\"\n              control={<Radio />}\n              label=\"All\"\n              // onChange={(event) => setValue(event.target.value)}\n            />\n          </Grid>\n          <Grid item xs>\n            <FormControlLabel\n              value=\"sales\"\n              control={<Radio />}\n              label=\"Sales\"\n              // onChange={(event) => setValue(event.target.value)}\n            />\n          </Grid>\n          <Grid item xs>\n            <FormControlLabel\n              value=\"purchases\"\n              control={<Radio />}\n              label=\"Purchases\"\n              // onChange={(event) => setValue(event.target.value)}\n            />\n          </Grid>\n        </Grid>\n      </RadioGroup>\n    </FormControl>\n  );\n};\n\nexport default Transactions;\n","import React, { useContext } from 'react';\nimport {\n  Button,\n  Grid,\n  TextField,\n  Dialog,\n  DialogTitle,\n  DialogContent,\n} from '@material-ui/core';\nimport { Formik, Form } from 'formik';\nimport * as Yup from 'yup';\nimport { GlobalContext } from '../context/GlobalState';\n\nconst ProductMaster = () => {\n  const { addProduct } = useContext(GlobalContext);\n\n  const [open, setOpen] = React.useState(false);\n\n  const handleClickOpen = () => {\n    setOpen(true);\n  };\n\n  const handleClose = () => {\n    setOpen(false);\n  };\n\n  const validationSchema = Yup.object({\n    salesPrice: Yup.string().required('rate is required'),\n    purchasePrice: Yup.string().required('purchase Price is required'),\n    productName: Yup.string().required('product name is required'),\n  });\n\n  const initialValues = {\n    salesPrice: '',\n    purchasePrice: '',\n    productName: '',\n  };\n\n  const onSubmit = (values) => {\n    addProduct(values);\n  };\n\n  return (\n    <>\n      <Button variant=\"outlined\" color=\"primary\" onClick={handleClickOpen}>\n        Product Master\n      </Button>\n      <Dialog\n        open={open}\n        onClose={handleClose}\n        aria-labelledby=\"form-dialog-title\"\n      >\n        <DialogTitle id=\"form-dialog-title\">Product Master</DialogTitle>\n        <DialogContent>\n          <Formik\n            initialValues={initialValues}\n            validationSchema={validationSchema}\n            onSubmit={onSubmit}\n            enableReinitialize={true}\n          >\n            {({ touched, errors, handleChange, isSubmitting, values }) => (\n              <Form className=\"\">\n                <Grid container spacing=\"2\">\n                  <Grid item xs={12} sm={6} md={4}>\n                    <TextField\n                      fullWidth\n                      id=\"productName\"\n                      name=\"productName\"\n                      label=\"productName\"\n                      onChange={handleChange}\n                      error={touched.productName && Boolean(errors.productName)}\n                      helperText={touched.productName && errors.productName}\n                    />\n                  </Grid>\n                  <Grid item xs={12} sm={6} md={4}>\n                    <TextField\n                      fullWidth\n                      id=\"salesPrice\"\n                      name=\"salesPrice\"\n                      label=\"salesPrice\"\n                      onChange={handleChange}\n                      error={touched.salesPrice && Boolean(errors.salesPrice)}\n                      helperText={touched.salesPrice && errors.salesPrice}\n                    />\n                  </Grid>\n                  <Grid item xs={12} sm={6} md={4}>\n                    <TextField\n                      fullWidth\n                      id=\"purchasePrice\"\n                      name=\"purchasePrice\"\n                      label=\"purchasePrice\"\n                      onChange={handleChange}\n                      error={\n                        touched.purchasePrice && Boolean(errors.purchasePrice)\n                      }\n                      helperText={touched.purchasePrice && errors.purchasePrice}\n                    />\n                  </Grid>\n                  <Grid item xs={12} sm={12} md={12}>\n                    <Button\n                      color=\"primary\"\n                      variant=\"contained\"\n                      fullWidth\n                      type=\"submit\"\n                    >\n                      Submit\n                    </Button>\n                  </Grid>\n                </Grid>\n              </Form>\n            )}\n          </Formik>\n        </DialogContent>\n      </Dialog>\n    </>\n  );\n};\n\nexport default ProductMaster;\n","import React from \"react\";\nimport {\n  Container,\n  Card,\n  Typography,\n  Grid,\n  Button,\n  CardContent\n} from \"@material-ui/core\";\nimport { GlobalProvider } from \"./context/GlobalState\";\nimport Stock from \"./components/Stock\";\nimport Reports from \"./components/Reports\";\nimport Transactions from \"./components/Transactions\";\nimport ProductMaster from \"./components/ProductMaster\";\n\nexport default function App() {\n  return (\n    <GlobalProvider>\n      <Container>\n        <Grid container spacing={2} alignItems=\"center\">\n          <Grid item xs={12} md={8}>\n            <Filters />\n          </Grid>\n          <Grid item xs={12} md={4}>\n            <ProductMaster />\n          </Grid>\n        </Grid>\n        <Reports />\n        <Grid container spacing={4}>\n          <Grid item sm={12} md={4}>\n            <Stock />\n          </Grid>\n          <Grid item sm={12} md={8}>\n            <Transactions />\n          </Grid>\n        </Grid>\n      </Container>\n    </GlobalProvider>\n  );\n}\n\nconst Filters = () => {\n  console.log(\"Filters\");\n  return (\n    <Card>\n      <CardContent>\n        <Typography>Filters</Typography>\n        <Grid container spacing={4}>\n          <Grid item>\n            <label>Start Date</label>\n            <input type=\"date\" />\n          </Grid>\n          <Grid item>\n            <label>End Date</label>\n            <input type=\"date\" />\n          </Grid>\n          <Grid item>\n            <Button variant=\"outlined\" color=\"primary\">\n              Refresh\n            </Button>\n          </Grid>\n        </Grid>\n      </CardContent>\n    </Card>\n  );\n};\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}